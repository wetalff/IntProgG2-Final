import os
import sys
from datetime import datetime, date, time
from typing import Optional
from gestor_superhabit import GestorSuperHabit

class InterfazUsuario:
    """Interfaz de usuario para la aplicaci√≥n SuperH√°bit"""
    
    def __init__(self):
        self.gestor = GestorSuperHabit()
        self.ejecutando = True
    
    def limpiar_pantalla(self):
        """Limpia la pantalla de la consola"""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def pausar(self):
        """Pausa la ejecuci√≥n hasta que el usuario presione Enter"""
        input("\nPresiona Enter para continuar...")
    
    def _solicitar_opcion_menu(self, mensaje: str, min_opcion: int, max_opcion: int) -> str:
        """Solicita una opci√≥n del men√∫ con validaci√≥n"""
        while True:
            try:
                opcion = input(mensaje).strip()
                if not opcion:
                    print("‚ö†Ô∏è Por favor, ingresa una opci√≥n v√°lida.")
                    continue
                
                opcion_num = int(opcion)
                if min_opcion <= opcion_num <= max_opcion:
                    return str(opcion_num)
                else:
                    print(f"‚ö†Ô∏è Por favor, ingresa un n√∫mero entre {min_opcion} y {max_opcion}.")
                    
            except ValueError:
                print("‚ö†Ô∏è Por favor, ingresa un n√∫mero v√°lido.")
    
    def _solicitar_numero_entero(self, mensaje: str, minimo: int = None, maximo: int = None) -> int:
        """Solicita un n√∫mero entero con validaci√≥n"""
        while True:
            try:
                valor = input(mensaje).strip()
                if not valor:
                    print("‚ö†Ô∏è Por favor, ingresa un valor.")
                    continue
                
                numero = int(valor)
                
                if minimo is not None and numero < minimo:
                    print(f"‚ö†Ô∏è El valor debe ser mayor o igual a {minimo}.")
                    continue
                    
                if maximo is not None and numero > maximo:
                    print(f"‚ö†Ô∏è El valor debe ser menor o igual a {maximo}.")
                    continue
                    
                return numero
                
            except ValueError:
                print("‚ö†Ô∏è Por favor, ingresa un n√∫mero v√°lido.")
    
    def _solicitar_texto_no_vacio(self, mensaje: str) -> str:
        """Solicita un texto que no est√© vac√≠o"""
        while True:
            texto = input(mensaje).strip()
            if texto:
                return texto
            print("‚ö†Ô∏è Este campo no puede estar vac√≠o. Por favor, ingresa un valor.")
    
    def mostrar_titulo(self, titulo: str):
        """Muestra un t√≠tulo formateado"""
        print("\n" + "="*50)
        print(f"  {titulo}")
        print("="*50)
    
    def mostrar_menu_principal(self):
        """Muestra el men√∫ principal"""
        self.limpiar_pantalla()
        print("üåü" * 20)
        print("    üí™ SUPERH√ÅBIT - Tu Compa√±ero de H√°bitos üí™")
        print("üåü" * 20)
        
        # Mostrar mensaje de bienvenida
        mensaje_bienvenida = self.gestor.obtener_mensaje_bienvenida()
        print(f"\nüåÖ {mensaje_bienvenida}")
        
        print("\nüó∫Ô∏è MEN√ö PRINCIPAL:")
        print("\n1. üìÖ Ver agenda de hoy")
        print("2. ‚ûï Agregar nuevo h√°bito")
        print("3. ‚úÖ Marcar h√°bito como completado")
        print("4. üìà Ver progreso de h√°bitos")
        print("5. üìä Ver resumen general")
        print("6. ‚öôÔ∏è Gestionar h√°bitos")
        print("7. üìÅ Ver historial")
        print("8. üì¢ Ver recordatorios")
        print("9. üö™ Salir")
        
        return self._solicitar_opcion_menu("üéØ Selecciona una opci√≥n (1-9): ", 1, 9)
    
    def ejecutar(self):
        """Ejecuta la aplicaci√≥n principal"""
        while self.ejecutando:
            try:
                opcion = self.mostrar_menu_principal()
                
                if opcion == '1':
                    self.mostrar_agenda_hoy()
                elif opcion == '2':
                    self.agregar_habito()
                elif opcion == '3':
                    self.marcar_habito_completado()
                elif opcion == '4':
                    self.mostrar_progreso_habitos()
                elif opcion == '5':
                    self.mostrar_resumen_general()
                elif opcion == '6':
                    self.gestionar_habitos()
                elif opcion == '7':
                    self.mostrar_historial()
                elif opcion == '8':
                    self.mostrar_recordatorios()
                elif opcion == '9':
                    self.salir()
                else:
                    print("‚ö†Ô∏è Opci√≥n no v√°lida. Por favor, selecciona una opci√≥n del 1 al 9.")
                    self.pausar()
                    
            except KeyboardInterrupt:
                print("\n\nüëã ¬°Hasta luego!")
                break
            except Exception as e:
                print(f"\n‚ö†Ô∏è Error inesperado: {e}")
                self.pausar()
    
    def mostrar_agenda_hoy(self):
        """Muestra la agenda del d√≠a actual"""
        self.limpiar_pantalla()
        self.mostrar_titulo("üìÖ AGENDA DE HOY")
        
        agenda = self.gestor.generar_agenda_diaria()
        
        print(f"\nüìÜ Fecha: {agenda['fecha']}")
        
        if not agenda['habitos']:
            print("\nüéÜ ¬°No tienes h√°bitos programados para hoy!")
            print("üí° Considera agregar algunos h√°bitos para empezar tu jornada de crecimiento personal.")
        else:
            print(f"\nüìä Resumen: {agenda['resumen']['completados']}/{agenda['resumen']['total']} h√°bitos completados ({agenda['resumen']['porcentaje']:.0f}%)")
            
            print("\nüó∫Ô∏è H√ÅBITOS DEL D√çA:")
            print("-" * 60)
            
            for i, item in enumerate(agenda['habitos'], 1):
                habito = item['habito']
                estado = "‚úÖ" if item['completado'] else "‚ùå"
                horario = f" a las {item['horario_sugerido']}" if item['horario_sugerido'] else ""
                racha = f" (üî• Racha: {item['racha_actual']} d√≠as)" if item['racha_actual'] > 0 else ""
                
                print(f"{i}. {estado} {habito.nombre}")
                print(f"   ‚è±Ô∏è {item['duracion']} minutos{horario}{racha}")
                print(f"   üîÑ Frecuencia: {habito.frecuencia.capitalize()}")
                print()
        
        self.pausar()
    
    def agregar_habito(self):
        """Permite agregar un nuevo h√°bito"""
        self.limpiar_pantalla()
        self.mostrar_titulo("‚ûï AGREGAR NUEVO H√ÅBITO")
        
        try:
            print("üìù Complete la informaci√≥n del nuevo h√°bito:\n")
            
            # Solicitar nombre con validaci√≥n
            nombre = self._solicitar_texto_no_vacio("üè∑Ô∏è Nombre del h√°bito: ")
            
            # Solicitar frecuencia con validaci√≥n
            print("\nüîÑ Frecuencia:")
            print("1. Diaria")
            print("2. Semanal")
            opcion_freq = self._solicitar_opcion_menu("Selecciona (1-2): ", 1, 2)
            
            if opcion_freq == '1':
                frecuencia = 'diaria'
            else:  # opcion_freq == '2'
                frecuencia = 'semanal'
            
            # Solicitar duraci√≥n con validaci√≥n
            duracion = self._solicitar_numero_entero("\n‚è±Ô∏è Duraci√≥n estimada (en minutos): ", minimo=1, maximo=1440)
            
            # Solicitar horario sugerido (opcional)
            horario = self._solicitar_horario_mejorado()
            
            # Crear h√°bito
            habito = self.gestor.crear_habito(nombre, frecuencia, duracion, horario if horario else None)
            
            print(f"\n‚ú® ¬°H√°bito '{habito.nombre}' creado exitosamente!")
            print(f"üîÑ Frecuencia: {habito.frecuencia.capitalize()}")
            print(f"‚è±Ô∏è Duraci√≥n: {habito.duracion} minutos")
            if habito.horario_sugerido:
                print(f"üï∞Ô∏è Horario sugerido: {habito.horario_sugerido.strftime('%H:%M')}")
            
            print("\nüí™ ¬°Es hora de empezar a construir este h√°bito!")
            
        except ValueError as e:
            print(f"\n‚ö†Ô∏è Error: {e}")
        
        self.pausar()
    
    def _validar_horario(self, horario: str) -> bool:
        """Valida el formato de horario HH:MM"""
        try:
            partes = horario.split(':')
            if len(partes) != 2:
                return False
            hora, minuto = int(partes[0]), int(partes[1])
            return 0 <= hora <= 23 and 0 <= minuto <= 59
        except ValueError:
            return False
    
    def _solicitar_horario(self) -> str:
        """Solicita horario con opci√≥n de AM/PM"""
        print("\nüï∞Ô∏è Horario sugerido (opcional):")
        print("1. Usar formato 24 horas (HH:MM, ej: 14:30)")
        print("2. Usar formato 12 horas con AM/PM (ej: 2:30 PM)")
        print("3. No especificar horario")
        
        opcion = input("Selecciona una opci√≥n (1-3): ").strip()
        
        if opcion == '1':
            horario = input("Ingresa el horario (HH:MM): ").strip()
            if horario and not self._validar_horario(horario):
                print("‚ö†Ô∏è Formato de horario inv√°lido. Usa HH:MM (ej: 08:30)")
                return False
            return horario
        
        elif opcion == '2':
            return self._solicitar_horario_12h()
        
        elif opcion == '3':
            return ""
        
        else:
            print("‚ö†Ô∏è Opci√≥n no v√°lida.")
            return False
    
    def _solicitar_horario_12h(self) -> str:
        """Solicita horario en formato 12 horas con AM/PM"""
        try:
            hora = int(input("Hora (1-12): "))
            if not (1 <= hora <= 12):
                print("‚ö†Ô∏è La hora debe estar entre 1 y 12.")
                return False
            
            minuto = int(input("Minutos (0-59): "))
            if not (0 <= minuto <= 59):
                print("‚ö†Ô∏è Los minutos deben estar entre 0 y 59.")
                return False
            
            print("AM o PM:")
            print("1. AM")
            print("2. PM")
            opcion_ampm = input("Selecciona (1-2): ").strip()
            
            if opcion_ampm == '1':
                periodo = 'AM'
            elif opcion_ampm == '2':
                periodo = 'PM'
            else:
                print("‚ö†Ô∏è Opci√≥n no v√°lida.")
                return False
            
            # Convertir a formato 24 horas
            if periodo == 'AM':
                if hora == 12:
                    hora_24 = 0
                else:
                    hora_24 = hora
            else:  # PM
                if hora == 12:
                    hora_24 = 12
                else:
                    hora_24 = hora + 12
            
            return f"{hora_24:02d}:{minuto:02d}"
            
        except ValueError:
            print("‚ö†Ô∏è Ingresa n√∫meros v√°lidos.")
            return False
    
    def _solicitar_horario_mejorado(self) -> str:
        """Solicita horario con validaci√≥n mejorada"""
        print("\nüï∞Ô∏è Horario sugerido (opcional):")
        print("1. Usar formato 24 horas (HH:MM, ej: 14:30)")
        print("2. Usar formato 12 horas con AM/PM (ej: 2:30 PM)")
        print("3. No especificar horario")
        
        opcion = self._solicitar_opcion_menu("Selecciona una opci√≥n (1-3): ", 1, 3)
        
        if opcion == '1':
            while True:
                horario = input("Ingresa el horario (HH:MM): ").strip()
                if not horario:
                    return ""
                if self._validar_horario(horario):
                    return horario
                print("‚ö†Ô∏è Formato de horario inv√°lido. Usa HH:MM (ej: 08:30)")
        
        elif opcion == '2':
            while True:
                resultado = self._solicitar_horario_12h()
                if resultado is not False:
                    return resultado
                print("‚ö†Ô∏è Intenta nuevamente.")
        
        else:  # opcion == '3'
            return ""
    
    def marcar_habito_completado(self):
        """Permite marcar un h√°bito como completado"""
        self.limpiar_pantalla()
        self.mostrar_titulo("‚úÖ MARCAR H√ÅBITO COMPLETADO")
        
        habitos_pendientes = self.gestor.obtener_habitos_pendientes_hoy()
        
        if not habitos_pendientes:
            print("\nüéâ ¬°Felicitaciones! No tienes h√°bitos pendientes para hoy.")
            print("üéÜ ¬°Has completado todos tus h√°bitos del d√≠a!")
            self.pausar()
            return
        
        print("\nüó∫Ô∏è H√ÅBITOS PENDIENTES PARA HOY:")
        print("-" * 40)
        
        for i, habito in enumerate(habitos_pendientes, 1):
            horario = f" (sugerido: {habito.horario_sugerido.strftime('%H:%M')})" if habito.horario_sugerido else ""
            print(f"{i}. {habito.nombre} - {habito.duracion} min{horario}")
        
        # Usar validaci√≥n mejorada
        opcion = self._solicitar_opcion_menu(f"\nüéØ Selecciona el h√°bito a completar (1-{len(habitos_pendientes)}): ", 1, len(habitos_pendientes))
        
        habito_seleccionado = habitos_pendientes[int(opcion) - 1]
        
        # Solicitar nota opcional
        nota = input("\nüìù Agregar nota (opcional): ").strip()
        nota = nota if nota else None
        
        # Marcar como completado
        mensaje = self.gestor.marcar_habito_completado(habito_seleccionado.id, nota=nota)
        
        print(f"\n{mensaje}")
        
        self.pausar()
    
    def mostrar_progreso_habitos(self):
        """Muestra el progreso de todos los h√°bitos"""
        self.limpiar_pantalla()
        self.mostrar_titulo("üìà PROGRESO DE H√ÅBITOS")
        
        habitos = self.gestor.obtener_habitos_activos()
        
        if not habitos:
            print("\nüí≠ No tienes h√°bitos registrados a√∫n.")
            print("üí° ¬°Agrega tu primer h√°bito para empezar a ver tu progreso!")
            self.pausar()
            return
        
        print("\nüó∫Ô∏è Selecciona un h√°bito para ver su progreso detallado:")
        print("-" * 50)
        
        for i, habito in enumerate(habitos, 1):
            estadisticas = self.gestor.calculadora_progreso.calcular_estadisticas_generales(habito)
            print(f"{i}. {habito.nombre} - √âxito: {estadisticas['porcentaje_exito']:.0f}% - Racha: {estadisticas['racha_actual']} d√≠as")
        
        print(f"{len(habitos) + 1}. Volver al men√∫ principal")
        
        opcion = self._solicitar_opcion_menu(f"\nüéØ Selecciona una opci√≥n (1-{len(habitos) + 1}): ", 1, len(habitos) + 1)
        
        if 1 <= int(opcion) <= len(habitos):
            self.mostrar_progreso_detallado(habitos[int(opcion) - 1].id)
        else:  # opcion == len(habitos) + 1
            return
    
    def mostrar_progreso_detallado(self, habito_id: int):
        """Muestra el progreso detallado de un h√°bito espec√≠fico"""
        self.limpiar_pantalla()
        
        progreso = self.gestor.obtener_progreso_habito(habito_id)
        if not progreso:
            print("‚ö†Ô∏è H√°bito no encontrado.")
            self.pausar()
            return
        
        habito = progreso['habito']
        stats = progreso['estadisticas_generales']
        semanal = progreso['progreso_semanal']
        mensual = progreso['progreso_mensual']
        
        self.mostrar_titulo(f"üìà PROGRESO DETALLADO: {habito.nombre.upper()}")
        
        print(f"\nüè∑Ô∏è Informaci√≥n del h√°bito:")
        print(f"   üîÑ Frecuencia: {habito.frecuencia.capitalize()}")
        print(f"   ‚è±Ô∏è Duraci√≥n: {habito.duracion} minutos")
        if habito.horario_sugerido:
            print(f"   üï∞Ô∏è Horario sugerido: {habito.horario_sugerido.strftime('%H:%M')}")
        print(f"   üìÖ Creado: {stats['fecha_creacion']}")
        
        print(f"\nüìä Estad√≠sticas generales:")
        print(f"   üìà Tasa de √©xito: {stats['porcentaje_exito']:.1f}%")
        print(f"   üìÖ Total de d√≠as: {stats['total_dias']}")
        print(f"   ‚úÖ D√≠as completados: {stats['dias_completados']}")
        print(f"   üî• Racha actual: {stats['racha_actual']} d√≠as")
        print(f"   üèÜ Racha m√°xima: {stats['racha_maxima']} d√≠as")
        
        print(f"\nüìÖ Progreso semanal ({semanal['periodo']}):")
        self._mostrar_barra_progreso(semanal['porcentaje'])
        print(f"   ‚úÖ {semanal['completados']}/{semanal['objetivo']} objetivos alcanzados")
        
        print(f"\nüìÜ Progreso mensual ({mensual['periodo']}):")
        self._mostrar_barra_progreso(mensual['porcentaje'])
        print(f"   ‚úÖ {mensual['completados']}/{mensual['objetivo']} objetivos alcanzados")
        
        print(f"\nüí° Recomendaci√≥n:")
        print(f"   {progreso['recomendacion']}")
        
        self.pausar()
    
    def _mostrar_barra_progreso(self, porcentaje: float):
        """Muestra una barra de progreso visual"""
        ancho_barra = 30
        progreso_completo = int((porcentaje / 100) * ancho_barra)
        progreso_incompleto = ancho_barra - progreso_completo
        
        barra = "‚ñà" * progreso_completo + "‚ñë" * progreso_incompleto
        print(f"   [{barra}] {porcentaje:.1f}%")
    
    def mostrar_resumen_general(self):
        """Muestra un resumen general de todos los h√°bitos"""
        self.limpiar_pantalla()
        self.mostrar_titulo("üìä RESUMEN GENERAL")
        
        resumen = self.gestor.obtener_resumen_general()
        
        if resumen['total_habitos'] == 0:
            print(f"\n{resumen['mensaje']}")
            self.pausar()
            return
        
        print(f"\nüìä Total de h√°bitos activos: {resumen['total_habitos']}")
        
        # Resumen del d√≠a
        diario = resumen['resumen_diario']
        print(f"\nüìÖ Resumen de hoy ({diario['fecha']}):")
        if diario['total_habitos'] > 0:
            self._mostrar_barra_progreso(diario['porcentaje'])
            print(f"   ‚úÖ Completados: {diario['completados']}")
            print(f"   ‚è≥ Pendientes: {diario['pendientes']}")
        else:
            print("   üí≠ No hay h√°bitos programados para hoy")
        
        # Top 5 h√°bitos
        if resumen['habitos_ranking']:
            print(f"\nüèÜ Top 5 h√°bitos (por tasa de √©xito):")
            for i, item in enumerate(resumen['habitos_ranking'], 1):
                habito = item['habito']
                print(f"   {i}. {habito.nombre} - {item['porcentaje_exito']:.0f}% (üî• {item['racha_actual']} d√≠as)")
        
        # Mensaje semanal
        print(f"\n{resumen['mensaje_semanal']}")
        
        # Consejo del d√≠a
        print(f"\n{resumen['consejo_del_dia']}")
        
        self.pausar()
    
    def gestionar_habitos(self):
        """Men√∫ para gestionar h√°bitos existentes"""
        while True:
            self.limpiar_pantalla()
            self.mostrar_titulo("‚öôÔ∏è GESTIONAR H√ÅBITOS")
            
            habitos = self.gestor.obtener_habitos_activos()
            
            if not habitos:
                print("\nüí≠ No tienes h√°bitos registrados a√∫n.")
                print("üí° ¬°Agrega tu primer h√°bito desde el men√∫ principal!")
                self.pausar()
                return
            
            print("\nüó∫Ô∏è H√ÅBITOS ACTIVOS:")
            print("-" * 50)
            
            for i, habito in enumerate(habitos, 1):
                horario = f" a las {habito.horario_sugerido.strftime('%H:%M')}" if habito.horario_sugerido else ""
                print(f"{i}. {habito.nombre} ({habito.frecuencia}, {habito.duracion} min{horario})")
            
            print(f"\n{len(habitos) + 1}. Volver al men√∫ principal")
            
            opcion = self._solicitar_opcion_menu(f"\nüéØ Selecciona un h√°bito para gestionar (1-{len(habitos) + 1}): ", 1, len(habitos) + 1)
            
            if 1 <= int(opcion) <= len(habitos):
                self.gestionar_habito_individual(habitos[int(opcion) - 1])
            else:  # opcion == len(habitos) + 1
                return
    
    def gestionar_habito_individual(self, habito):
        """Gestiona un h√°bito individual"""
        while True:
            self.limpiar_pantalla()
            self.mostrar_titulo(f"‚öôÔ∏è GESTIONAR: {habito.nombre.upper()}")
            
            print(f"\nüè∑Ô∏è Informaci√≥n actual:")
            print(f"   Nombre: {habito.nombre}")
            print(f"   Frecuencia: {habito.frecuencia.capitalize()}")
            print(f"   Duraci√≥n: {habito.duracion} minutos")
            print(f"   Horario: {habito.horario_sugerido.strftime('%H:%M') if habito.horario_sugerido else 'No definido'}")
            
            print("\nüó∫Ô∏è Opciones:")
            print("1. ‚úèÔ∏è Editar h√°bito")
            print("2. ‚è∏Ô∏è Desactivar h√°bito")
            print("3. üóëÔ∏è Eliminar h√°bito permanentemente")
            print("4. ‚¨ÖÔ∏è Volver")
            
            opcion = self._solicitar_opcion_menu("\nüéØ Selecciona una opci√≥n (1-4): ", 1, 4)
            
            if opcion == '1':
                self.editar_habito(habito)
                break
            elif opcion == '2':
                if self.confirmar_accion(f"desactivar el h√°bito '{habito.nombre}'"):
                    if self.gestor.desactivar_habito(habito.id):
                        print(f"\n‚úÖ H√°bito '{habito.nombre}' desactivado exitosamente.")
                    else:
                        print(f"\n‚ö†Ô∏è Error al desactivar el h√°bito.")
                    self.pausar()
                break
            elif opcion == '3':
                if self.confirmar_accion(f"eliminar PERMANENTEMENTE el h√°bito '{habito.nombre}'"):
                    if self.gestor.eliminar_habito(habito.id):
                        print(f"\n‚úÖ H√°bito '{habito.nombre}' eliminado permanentemente.")
                    else:
                        print(f"\n‚ö†Ô∏è Error al eliminar el h√°bito.")
                    self.pausar()
                break
            elif opcion == '4':
                break
            else:
                print("‚ö†Ô∏è Opci√≥n no v√°lida.")
                self.pausar()
    
    def editar_habito(self, habito):
        """Permite editar un h√°bito existente"""
        self.limpiar_pantalla()
        self.mostrar_titulo(f"‚úèÔ∏è EDITAR H√ÅBITO: {habito.nombre.upper()}")
        
        print("\nüìù Deja en blanco para mantener el valor actual\n")
        
        try:
            # Editar nombre
            nuevo_nombre = input(f"Nuevo nombre [{habito.nombre}]: ").strip()
            
            # Editar frecuencia
            print(f"\nFrecuencia actual: {habito.frecuencia.capitalize()}")
            print("1. Diaria")
            print("2. Semanal")
            print("3. Mantener actual")
            opcion_freq = input("Selecciona (1-3): ").strip()
            
            nueva_frecuencia = None
            if opcion_freq == '1':
                nueva_frecuencia = 'diaria'
            elif opcion_freq == '2':
                nueva_frecuencia = 'semanal'
            
            # Editar duraci√≥n
            nueva_duracion_str = input(f"Nueva duraci√≥n en minutos [{habito.duracion}]: ").strip()
            nueva_duracion = None
            if nueva_duracion_str:
                try:
                    nueva_duracion = int(nueva_duracion_str)
                    if nueva_duracion <= 0:
                        print("‚ö†Ô∏è La duraci√≥n debe ser mayor a 0.")
                        self.pausar()
                        return
                except ValueError:
                    print("‚ö†Ô∏è Ingresa un n√∫mero v√°lido.")
                    self.pausar()
                    return
            
            # Editar horario
            horario_actual = habito.horario_sugerido.strftime('%H:%M') if habito.horario_sugerido else 'No definido'
            nuevo_horario = input(f"Nuevo horario sugerido [{horario_actual}]: ").strip()
            
            if nuevo_horario and not self._validar_horario(nuevo_horario):
                print("‚ö†Ô∏è Formato de horario inv√°lido. Usa HH:MM (ej: 08:30)")
                self.pausar()
                return
            
            # Aplicar cambios
            if self.gestor.actualizar_habito(
                habito.id,
                nombre=nuevo_nombre if nuevo_nombre else None,
                frecuencia=nueva_frecuencia,
                duracion=nueva_duracion,
                horario_sugerido=nuevo_horario if nuevo_horario else None
            ):
                print(f"\n‚úÖ H√°bito actualizado exitosamente!")
            else:
                print(f"\n‚ö†Ô∏è Error al actualizar el h√°bito.")
            
        except ValueError as e:
            print(f"\n‚ö†Ô∏è Error: {e}")
        
        self.pausar()
    
    def confirmar_accion(self, accion: str) -> bool:
        """Solicita confirmaci√≥n para una acci√≥n"""
        respuesta = input(f"\n‚ö†Ô∏è ¬øEst√°s seguro de que quieres {accion}? (s/N): ").strip().lower()
        return respuesta in ['s', 'si', 's√≠', 'yes', 'y']
    
    def mostrar_historial(self):
        """Muestra el historial de cumplimiento"""
        self.limpiar_pantalla()
        self.mostrar_titulo("üìÅ HISTORIAL DE CUMPLIMIENTO")
        
        habitos = self.gestor.obtener_habitos_activos()
        
        if not habitos:
            print("\nüí≠ No tienes h√°bitos registrados a√∫n.")
            self.pausar()
            return
        
        print("\nüó∫Ô∏è Selecciona un h√°bito para ver su historial:")
        print("-" * 40)
        
        for i, habito in enumerate(habitos, 1):
            print(f"{i}. {habito.nombre}")
        
        print(f"{len(habitos) + 1}. Volver al men√∫ principal")
        
        opcion = self._solicitar_opcion_menu(f"\nüéØ Selecciona una opci√≥n (1-{len(habitos) + 1}): ", 1, len(habitos) + 1)
        
        if 1 <= int(opcion) <= len(habitos):
            self.mostrar_historial_habito(habitos[int(opcion) - 1])
        else:  # opcion == len(habitos) + 1
            return
    
    def mostrar_historial_habito(self, habito):
        """Muestra el historial de un h√°bito espec√≠fico con opciones mejoradas"""
        self.limpiar_pantalla()
        self.mostrar_titulo(f"üìÅ HISTORIAL: {habito.nombre.upper()}")
        
        print("\nüìä Selecciona el per√≠odo de historial:")
        print("1. √öltimos 7 d√≠as")
        print("2. √öltimos 30 d√≠as")
        print("3. √öltimos 90 d√≠as")
        print("4. Todo el historial")
        print("5. Per√≠odo personalizado")
        
        opcion = self._solicitar_opcion_menu("\nSelecciona una opci√≥n (1-5): ", 1, 5)
        
        if opcion == '1':
            dias = 7
        elif opcion == '2':
            dias = 30
        elif opcion == '3':
            dias = 90
        elif opcion == '4':
            dias = 365  # Un a√±o como m√°ximo
        else:  # opcion == '5'
            dias = self._solicitar_numero_entero("\nüìÖ ¬øCu√°ntos d√≠as mostrar?: ", minimo=1, maximo=365)
        
        historial = self.gestor.obtener_historial_habito(habito.id, dias)
        
        if not historial:
            print("\nüí≠ No hay historial disponible para este h√°bito.")
            self.pausar()
            return
        
        # Calcular estad√≠sticas detalladas
        completados = sum(1 for dia in historial if dia['completado'])
        total = len(historial)
        porcentaje = (completados / total * 100) if total > 0 else 0
        
        # Calcular racha actual y m√°xima
        racha_actual = 0
        racha_maxima = 0
        racha_temp = 0
        
        for dia in reversed(historial):
            if dia['completado']:
                racha_temp += 1
                if racha_actual == 0:  # Solo contar la racha actual desde el final
                    racha_actual = racha_temp
            else:
                if racha_temp > racha_maxima:
                    racha_maxima = racha_temp
                racha_temp = 0
                if racha_actual == 0:  # Si no hay racha actual, seguir buscando
                    pass
                else:
                    break  # Ya encontramos la racha actual
        
        if racha_temp > racha_maxima:
            racha_maxima = racha_temp
        
        print(f"\nüìä RESUMEN DEL PER√çODO ({dias} d√≠as):")
        print("-" * 50)
        print(f"üìà Tasa de cumplimiento: {completados}/{total} d√≠as ({porcentaje:.1f}%)")
        self._mostrar_barra_progreso(porcentaje)
        print(f"üî• Racha actual: {racha_actual} d√≠as")
        print(f"üèÜ Racha m√°xima: {racha_maxima} d√≠as")
        
        # Mostrar an√°lisis de tendencias
        if len(historial) >= 14:
            primera_mitad = historial[:len(historial)//2]
            segunda_mitad = historial[len(historial)//2:]
            
            porc_primera = (sum(1 for d in primera_mitad if d['completado']) / len(primera_mitad) * 100)
            porc_segunda = (sum(1 for d in segunda_mitad if d['completado']) / len(segunda_mitad) * 100)
            
            if porc_segunda > porc_primera + 10:
                print("üìà ¬°Tendencia positiva! Has mejorado tu constancia recientemente.")
            elif porc_primera > porc_segunda + 10:
                print("üìâ Tendencia decreciente. ¬°Puedes retomar el ritmo!")
            else:
                print("‚û°Ô∏è Tendencia estable en el per√≠odo.")
        
        # Mostrar calendario visual para per√≠odos cortos
        if dias <= 30:
            print(f"\nüìÖ CALENDARIO VISUAL:")
            print("-" * 50)
            
            # Agrupar por semanas
            import datetime
            for i in range(0, len(historial), 7):
                semana = historial[i:i+7]
                print(f"\nSemana {i//7 + 1}:")
                for dia in semana:
                    estado = "‚úÖ" if dia['completado'] else "‚ùå"
                    fecha_obj = datetime.datetime.strptime(dia['fecha'], '%d/%m/%Y')
                    dia_semana = fecha_obj.strftime('%a')
                    nota = f" ({dia['nota'][:20]}...)" if dia['nota'] and len(dia['nota']) > 20 else f" ({dia['nota']})" if dia['nota'] else ""
                    print(f"  {dia_semana} {dia['fecha']}: {estado}{nota}")
        else:
            # Para per√≠odos largos, mostrar solo resumen por semanas
            print(f"\nüìÖ √öLTIMOS 21 D√çAS DETALLADOS:")
            print("-" * 50)
            for dia in historial[-21:]:
                estado = "‚úÖ" if dia['completado'] else "‚ùå"
                nota = f" - {dia['nota']}" if dia['nota'] else ""
                print(f"   {dia['fecha']} {estado}{nota}")
            
            if len(historial) > 21:
                print(f"\nüìù ... y {len(historial) - 21} d√≠as m√°s (usa per√≠odo m√°s corto para ver detalles)")
        
        # Mostrar d√≠as con notas
        dias_con_notas = [d for d in historial if d['nota']]
        if dias_con_notas:
            print(f"\nüìù NOTAS DESTACADAS:")
            print("-" * 50)
            for dia in dias_con_notas[-5:]:  # √öltimas 5 notas
                print(f"   {dia['fecha']}: {dia['nota']}")
        
        self.pausar()
    
    def mostrar_recordatorios(self):
        """Muestra recordatorios y alertas"""
        self.limpiar_pantalla()
        self.mostrar_titulo("üì¢ RECORDATORIOS Y ALERTAS")
        
        recordatorios = self.gestor.generar_recordatorios()
        print(f"\n{recordatorios}")
        
        # Mostrar consejo del d√≠a
        print("\n" + "-" * 50)
        consejo = self.gestor.generador_mensajes.obtener_consejo_del_dia()
        print(f"\n{consejo}")
        
        self.pausar()
    
    def salir(self):
        """Maneja la salida de la aplicaci√≥n"""
        self.limpiar_pantalla()
        print("üåü" * 20)
        print("    üëã ¬°HASTA LUEGO!")
        print("üåü" * 20)
        
        # Mostrar mensaje de despedida motivacional
        habitos = self.gestor.obtener_habitos_activos()
        if habitos:
            resumen = self.gestor.obtener_resumen_general()
            if resumen['resumen_diario']['porcentaje'] >= 80:
                print("\nüéÜ ¬°Excelente trabajo hoy! Sigues construyendo h√°bitos s√≥lidos.")
            elif resumen['resumen_diario']['completados'] > 0:
                print("\nüí™ ¬°Buen progreso! Cada peque√±o paso cuenta hacia tus objetivos.")
            else:
                print("\nüåÖ Ma√±ana es una nueva oportunidad para crecer. ¬°T√∫ puedes!")
        
        print("\nüöÄ Recuerda: Los grandes cambios empiezan con peque√±as acciones diarias.")
        print("üåü ¬°Nos vemos pronto en tu jornada de crecimiento personal!")
        
        self.ejecutando = False

